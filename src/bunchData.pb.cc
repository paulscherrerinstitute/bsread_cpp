// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: bunchData.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "bunchData.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace bsdaqPB {

namespace {

const ::google::protobuf::Descriptor* BunchData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BunchData_reflection_ = NULL;
const ::google::protobuf::Descriptor* BunchData_Record_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BunchData_Record_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_bunchData_2eproto() {
  protobuf_AddDesc_bunchData_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "bunchData.proto");
  GOOGLE_CHECK(file != NULL);
  BunchData_descriptor_ = file->message_type(0);
  static const int BunchData_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BunchData, pulse_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BunchData, record_),
  };
  BunchData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BunchData_descriptor_,
      BunchData::default_instance_,
      BunchData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BunchData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BunchData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BunchData));
  BunchData_Record_descriptor_ = BunchData_descriptor_->nested_type(0);
  static const int BunchData_Record_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BunchData_Record, record_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BunchData_Record, double_val_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BunchData_Record, string_val_),
  };
  BunchData_Record_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BunchData_Record_descriptor_,
      BunchData_Record::default_instance_,
      BunchData_Record_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BunchData_Record, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BunchData_Record, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BunchData_Record));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_bunchData_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BunchData_descriptor_, &BunchData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BunchData_Record_descriptor_, &BunchData_Record::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_bunchData_2eproto() {
  delete BunchData::default_instance_;
  delete BunchData_reflection_;
  delete BunchData_Record::default_instance_;
  delete BunchData_Record_reflection_;
}

void protobuf_AddDesc_bunchData_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\017bunchData.proto\022\007bsdaqPB\"\217\001\n\tBunchData"
    "\022\020\n\010pulse_id\030\001 \002(\004\022)\n\006record\030\002 \003(\0132\031.bsd"
    "aqPB.BunchData.Record\032E\n\006Record\022\023\n\013recor"
    "d_name\030\001 \002(\t\022\022\n\ndouble_val\030\002 \003(\001\022\022\n\nstri"
    "ng_val\030\003 \003(\t", 172);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "bunchData.proto", &protobuf_RegisterTypes);
  BunchData::default_instance_ = new BunchData();
  BunchData_Record::default_instance_ = new BunchData_Record();
  BunchData::default_instance_->InitAsDefaultInstance();
  BunchData_Record::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_bunchData_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_bunchData_2eproto {
  StaticDescriptorInitializer_bunchData_2eproto() {
    protobuf_AddDesc_bunchData_2eproto();
  }
} static_descriptor_initializer_bunchData_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int BunchData_Record::kRecordNameFieldNumber;
const int BunchData_Record::kDoubleValFieldNumber;
const int BunchData_Record::kStringValFieldNumber;
#endif  // !_MSC_VER

BunchData_Record::BunchData_Record()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:bsdaqPB.BunchData.Record)
}

void BunchData_Record::InitAsDefaultInstance() {
}

BunchData_Record::BunchData_Record(const BunchData_Record& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:bsdaqPB.BunchData.Record)
}

void BunchData_Record::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  record_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BunchData_Record::~BunchData_Record() {
  // @@protoc_insertion_point(destructor:bsdaqPB.BunchData.Record)
  SharedDtor();
}

void BunchData_Record::SharedDtor() {
  if (record_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete record_name_;
  }
  if (this != default_instance_) {
  }
}

void BunchData_Record::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BunchData_Record::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BunchData_Record_descriptor_;
}

const BunchData_Record& BunchData_Record::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_bunchData_2eproto();
  return *default_instance_;
}

BunchData_Record* BunchData_Record::default_instance_ = NULL;

BunchData_Record* BunchData_Record::New() const {
  return new BunchData_Record;
}

void BunchData_Record::Clear() {
  if (has_record_name()) {
    if (record_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
      record_name_->clear();
    }
  }
  double_val_.Clear();
  string_val_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BunchData_Record::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:bsdaqPB.BunchData.Record)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string record_name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_record_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->record_name().data(), this->record_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "record_name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(17)) goto parse_double_val;
        break;
      }

      // repeated double double_val = 2;
      case 2: {
        if (tag == 17) {
         parse_double_val:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 17, input, this->mutable_double_val())));
        } else if (tag == 18) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_double_val())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(17)) goto parse_double_val;
        if (input->ExpectTag(26)) goto parse_string_val;
        break;
      }

      // repeated string string_val = 3;
      case 3: {
        if (tag == 26) {
         parse_string_val:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_string_val()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->string_val(this->string_val_size() - 1).data(),
            this->string_val(this->string_val_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "string_val");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_string_val;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:bsdaqPB.BunchData.Record)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:bsdaqPB.BunchData.Record)
  return false;
#undef DO_
}

void BunchData_Record::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:bsdaqPB.BunchData.Record)
  // required string record_name = 1;
  if (has_record_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->record_name().data(), this->record_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "record_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->record_name(), output);
  }

  // repeated double double_val = 2;
  for (int i = 0; i < this->double_val_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(
      2, this->double_val(i), output);
  }

  // repeated string string_val = 3;
  for (int i = 0; i < this->string_val_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
    this->string_val(i).data(), this->string_val(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE,
    "string_val");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->string_val(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:bsdaqPB.BunchData.Record)
}

::google::protobuf::uint8* BunchData_Record::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:bsdaqPB.BunchData.Record)
  // required string record_name = 1;
  if (has_record_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->record_name().data(), this->record_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "record_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->record_name(), target);
  }

  // repeated double double_val = 2;
  for (int i = 0; i < this->double_val_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteDoubleToArray(2, this->double_val(i), target);
  }

  // repeated string string_val = 3;
  for (int i = 0; i < this->string_val_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->string_val(i).data(), this->string_val(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "string_val");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(3, this->string_val(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bsdaqPB.BunchData.Record)
  return target;
}

int BunchData_Record::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string record_name = 1;
    if (has_record_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->record_name());
    }

  }
  // repeated double double_val = 2;
  {
    int data_size = 0;
    data_size = 8 * this->double_val_size();
    total_size += 1 * this->double_val_size() + data_size;
  }

  // repeated string string_val = 3;
  total_size += 1 * this->string_val_size();
  for (int i = 0; i < this->string_val_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->string_val(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BunchData_Record::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BunchData_Record* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BunchData_Record*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BunchData_Record::MergeFrom(const BunchData_Record& from) {
  GOOGLE_CHECK_NE(&from, this);
  double_val_.MergeFrom(from.double_val_);
  string_val_.MergeFrom(from.string_val_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_record_name()) {
      set_record_name(from.record_name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BunchData_Record::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BunchData_Record::CopyFrom(const BunchData_Record& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BunchData_Record::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void BunchData_Record::Swap(BunchData_Record* other) {
  if (other != this) {
    std::swap(record_name_, other->record_name_);
    double_val_.Swap(&other->double_val_);
    string_val_.Swap(&other->string_val_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BunchData_Record::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BunchData_Record_descriptor_;
  metadata.reflection = BunchData_Record_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int BunchData::kPulseIdFieldNumber;
const int BunchData::kRecordFieldNumber;
#endif  // !_MSC_VER

BunchData::BunchData()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:bsdaqPB.BunchData)
}

void BunchData::InitAsDefaultInstance() {
}

BunchData::BunchData(const BunchData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:bsdaqPB.BunchData)
}

void BunchData::SharedCtor() {
  _cached_size_ = 0;
  pulse_id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BunchData::~BunchData() {
  // @@protoc_insertion_point(destructor:bsdaqPB.BunchData)
  SharedDtor();
}

void BunchData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BunchData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BunchData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BunchData_descriptor_;
}

const BunchData& BunchData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_bunchData_2eproto();
  return *default_instance_;
}

BunchData* BunchData::default_instance_ = NULL;

BunchData* BunchData::New() const {
  return new BunchData;
}

void BunchData::Clear() {
  pulse_id_ = GOOGLE_ULONGLONG(0);
  record_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BunchData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:bsdaqPB.BunchData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 pulse_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &pulse_id_)));
          set_has_pulse_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_record;
        break;
      }

      // repeated .bsdaqPB.BunchData.Record record = 2;
      case 2: {
        if (tag == 18) {
         parse_record:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_record()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_record;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:bsdaqPB.BunchData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:bsdaqPB.BunchData)
  return false;
#undef DO_
}

void BunchData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:bsdaqPB.BunchData)
  // required uint64 pulse_id = 1;
  if (has_pulse_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->pulse_id(), output);
  }

  // repeated .bsdaqPB.BunchData.Record record = 2;
  for (int i = 0; i < this->record_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->record(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:bsdaqPB.BunchData)
}

::google::protobuf::uint8* BunchData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:bsdaqPB.BunchData)
  // required uint64 pulse_id = 1;
  if (has_pulse_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->pulse_id(), target);
  }

  // repeated .bsdaqPB.BunchData.Record record = 2;
  for (int i = 0; i < this->record_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->record(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bsdaqPB.BunchData)
  return target;
}

int BunchData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 pulse_id = 1;
    if (has_pulse_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->pulse_id());
    }

  }
  // repeated .bsdaqPB.BunchData.Record record = 2;
  total_size += 1 * this->record_size();
  for (int i = 0; i < this->record_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->record(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BunchData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BunchData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BunchData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BunchData::MergeFrom(const BunchData& from) {
  GOOGLE_CHECK_NE(&from, this);
  record_.MergeFrom(from.record_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_pulse_id()) {
      set_pulse_id(from.pulse_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BunchData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BunchData::CopyFrom(const BunchData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BunchData::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->record())) return false;
  return true;
}

void BunchData::Swap(BunchData* other) {
  if (other != this) {
    std::swap(pulse_id_, other->pulse_id_);
    record_.Swap(&other->record_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BunchData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BunchData_descriptor_;
  metadata.reflection = BunchData_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace bsdaqPB

// @@protoc_insertion_point(global_scope)
