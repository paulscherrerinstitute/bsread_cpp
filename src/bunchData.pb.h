//// Generated by the protocol buffer compiler.  DO NOT EDIT!
//// source: bunchData.proto
//
//#ifndef PROTOBUF_bunchData_2eproto__INCLUDED
//#define PROTOBUF_bunchData_2eproto__INCLUDED
//
//#include <string>
//
//#include <google/protobuf/stubs/common.h>
//
//#if GOOGLE_PROTOBUF_VERSION < 2006000
//#error This file was generated by a newer version of protoc which is
//#error incompatible with your Protocol Buffer headers.  Please update
//#error your headers.
//#endif
//#if 2006000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
//#error This file was generated by an older version of protoc which is
//#error incompatible with your Protocol Buffer headers.  Please
//#error regenerate this file with a newer version of protoc.
//#endif
//
//#include <google/protobuf/generated_message_util.h>
//#include <google/protobuf/message.h>
//#include <google/protobuf/repeated_field.h>
//#include <google/protobuf/extension_set.h>
//#include <google/protobuf/unknown_field_set.h>
//// @@protoc_insertion_point(includes)
//
//namespace bsdaqPB {
//
//// Internal implementation detail -- do not call these.
//void  protobuf_AddDesc_bunchData_2eproto();
//void protobuf_AssignDesc_bunchData_2eproto();
//void protobuf_ShutdownFile_bunchData_2eproto();
//
//class BunchData;
//class BunchData_Record;
//
//// ===================================================================
//
//class BunchData_Record : public ::google::protobuf::Message {
// public:
//  BunchData_Record();
//  virtual ~BunchData_Record();
//
//  BunchData_Record(const BunchData_Record& from);
//
//  inline BunchData_Record& operator=(const BunchData_Record& from) {
//    CopyFrom(from);
//    return *this;
//  }
//
//  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
//    return _unknown_fields_;
//  }
//
//  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
//    return &_unknown_fields_;
//  }
//
//  static const ::google::protobuf::Descriptor* descriptor();
//  static const BunchData_Record& default_instance();
//
//  void Swap(BunchData_Record* other);
//
//  // implements Message ----------------------------------------------
//
//  BunchData_Record* New() const;
//  void CopyFrom(const ::google::protobuf::Message& from);
//  void MergeFrom(const ::google::protobuf::Message& from);
//  void CopyFrom(const BunchData_Record& from);
//  void MergeFrom(const BunchData_Record& from);
//  void Clear();
//  bool IsInitialized() const;
//
//  int ByteSize() const;
//  bool MergePartialFromCodedStream(
//      ::google::protobuf::io::CodedInputStream* input);
//  void SerializeWithCachedSizes(
//      ::google::protobuf::io::CodedOutputStream* output) const;
//  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
//  int GetCachedSize() const { return _cached_size_; }
//  private:
//  void SharedCtor();
//  void SharedDtor();
//  void SetCachedSize(int size) const;
//  public:
//  ::google::protobuf::Metadata GetMetadata() const;
//
//  // nested types ----------------------------------------------------
//
//  // accessors -------------------------------------------------------
//
//  // required string record_name = 1;
//  inline bool has_record_name() const;
//  inline void clear_record_name();
//  static const int kRecordNameFieldNumber = 1;
//  inline const ::std::string& record_name() const;
//  inline void set_record_name(const ::std::string& value);
//  inline void set_record_name(const char* value);
//  inline void set_record_name(const char* value, size_t size);
//  inline ::std::string* mutable_record_name();
//  inline ::std::string* release_record_name();
//  inline void set_allocated_record_name(::std::string* record_name);
//
//  // repeated double double_val = 2;
//  inline int double_val_size() const;
//  inline void clear_double_val();
//  static const int kDoubleValFieldNumber = 2;
//  inline double double_val(int index) const;
//  inline void set_double_val(int index, double value);
//  inline void add_double_val(double value);
//  inline const ::google::protobuf::RepeatedField< double >&
//      double_val() const;
//  inline ::google::protobuf::RepeatedField< double >*
//      mutable_double_val();
//
//  // repeated string string_val = 3;
//  inline int string_val_size() const;
//  inline void clear_string_val();
//  static const int kStringValFieldNumber = 3;
//  inline const ::std::string& string_val(int index) const;
//  inline ::std::string* mutable_string_val(int index);
//  inline void set_string_val(int index, const ::std::string& value);
//  inline void set_string_val(int index, const char* value);
//  inline void set_string_val(int index, const char* value, size_t size);
//  inline ::std::string* add_string_val();
//  inline void add_string_val(const ::std::string& value);
//  inline void add_string_val(const char* value);
//  inline void add_string_val(const char* value, size_t size);
//  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& string_val() const;
//  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_string_val();
//
//  // @@protoc_insertion_point(class_scope:bsdaqPB.BunchData.Record)
// private:
//  inline void set_has_record_name();
//  inline void clear_has_record_name();
//
//  ::google::protobuf::UnknownFieldSet _unknown_fields_;
//
//  ::google::protobuf::uint32 _has_bits_[1];
//  mutable int _cached_size_;
//  ::std::string* record_name_;
//  ::google::protobuf::RepeatedField< double > double_val_;
//  ::google::protobuf::RepeatedPtrField< ::std::string> string_val_;
//  friend void  protobuf_AddDesc_bunchData_2eproto();
//  friend void protobuf_AssignDesc_bunchData_2eproto();
//  friend void protobuf_ShutdownFile_bunchData_2eproto();
//
//  void InitAsDefaultInstance();
//  static BunchData_Record* default_instance_;
//};
//// -------------------------------------------------------------------
//
//class BunchData : public ::google::protobuf::Message {
// public:
//  BunchData();
//  virtual ~BunchData();
//
//  BunchData(const BunchData& from);
//
//  inline BunchData& operator=(const BunchData& from) {
//    CopyFrom(from);
//    return *this;
//  }
//
//  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
//    return _unknown_fields_;
//  }
//
//  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
//    return &_unknown_fields_;
//  }
//
//  static const ::google::protobuf::Descriptor* descriptor();
//  static const BunchData& default_instance();
//
//  void Swap(BunchData* other);
//
//  // implements Message ----------------------------------------------
//
//  BunchData* New() const;
//  void CopyFrom(const ::google::protobuf::Message& from);
//  void MergeFrom(const ::google::protobuf::Message& from);
//  void CopyFrom(const BunchData& from);
//  void MergeFrom(const BunchData& from);
//  void Clear();
//  bool IsInitialized() const;
//
//  int ByteSize() const;
//  bool MergePartialFromCodedStream(
//      ::google::protobuf::io::CodedInputStream* input);
//  void SerializeWithCachedSizes(
//      ::google::protobuf::io::CodedOutputStream* output) const;
//  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
//  int GetCachedSize() const { return _cached_size_; }
//  private:
//  void SharedCtor();
//  void SharedDtor();
//  void SetCachedSize(int size) const;
//  public:
//  ::google::protobuf::Metadata GetMetadata() const;
//
//  // nested types ----------------------------------------------------
//
//  typedef BunchData_Record Record;
//
//  // accessors -------------------------------------------------------
//
//  // required uint64 pulse_id = 1;
//  inline bool has_pulse_id() const;
//  inline void clear_pulse_id();
//  static const int kPulseIdFieldNumber = 1;
//  inline ::google::protobuf::uint64 pulse_id() const;
//  inline void set_pulse_id(::google::protobuf::uint64 value);
//
//  // repeated .bsdaqPB.BunchData.Record record = 2;
//  inline int record_size() const;
//  inline void clear_record();
//  static const int kRecordFieldNumber = 2;
//  inline const ::bsdaqPB::BunchData_Record& record(int index) const;
//  inline ::bsdaqPB::BunchData_Record* mutable_record(int index);
//  inline ::bsdaqPB::BunchData_Record* add_record();
//  inline const ::google::protobuf::RepeatedPtrField< ::bsdaqPB::BunchData_Record >&
//      record() const;
//  inline ::google::protobuf::RepeatedPtrField< ::bsdaqPB::BunchData_Record >*
//      mutable_record();
//
//  // @@protoc_insertion_point(class_scope:bsdaqPB.BunchData)
// private:
//  inline void set_has_pulse_id();
//  inline void clear_has_pulse_id();
//
//  ::google::protobuf::UnknownFieldSet _unknown_fields_;
//
//  ::google::protobuf::uint32 _has_bits_[1];
//  mutable int _cached_size_;
//  ::google::protobuf::uint64 pulse_id_;
//  ::google::protobuf::RepeatedPtrField< ::bsdaqPB::BunchData_Record > record_;
//  friend void  protobuf_AddDesc_bunchData_2eproto();
//  friend void protobuf_AssignDesc_bunchData_2eproto();
//  friend void protobuf_ShutdownFile_bunchData_2eproto();
//
//  void InitAsDefaultInstance();
//  static BunchData* default_instance_;
//};
//// ===================================================================
//
//
//// ===================================================================
//
//// BunchData_Record
//
//// required string record_name = 1;
//inline bool BunchData_Record::has_record_name() const {
//  return (_has_bits_[0] & 0x00000001u) != 0;
//}
//inline void BunchData_Record::set_has_record_name() {
//  _has_bits_[0] |= 0x00000001u;
//}
//inline void BunchData_Record::clear_has_record_name() {
//  _has_bits_[0] &= ~0x00000001u;
//}
//inline void BunchData_Record::clear_record_name() {
//  if (record_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
//    record_name_->clear();
//  }
//  clear_has_record_name();
//}
//inline const ::std::string& BunchData_Record::record_name() const {
//  // @@protoc_insertion_point(field_get:bsdaqPB.BunchData.Record.record_name)
//  return *record_name_;
//}
//inline void BunchData_Record::set_record_name(const ::std::string& value) {
//  set_has_record_name();
//  if (record_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
//    record_name_ = new ::std::string;
//  }
//  record_name_->assign(value);
//  // @@protoc_insertion_point(field_set:bsdaqPB.BunchData.Record.record_name)
//}
//inline void BunchData_Record::set_record_name(const char* value) {
//  set_has_record_name();
//  if (record_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
//    record_name_ = new ::std::string;
//  }
//  record_name_->assign(value);
//  // @@protoc_insertion_point(field_set_char:bsdaqPB.BunchData.Record.record_name)
//}
//inline void BunchData_Record::set_record_name(const char* value, size_t size) {
//  set_has_record_name();
//  if (record_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
//    record_name_ = new ::std::string;
//  }
//  record_name_->assign(reinterpret_cast<const char*>(value), size);
//  // @@protoc_insertion_point(field_set_pointer:bsdaqPB.BunchData.Record.record_name)
//}
//inline ::std::string* BunchData_Record::mutable_record_name() {
//  set_has_record_name();
//  if (record_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
//    record_name_ = new ::std::string;
//  }
//  // @@protoc_insertion_point(field_mutable:bsdaqPB.BunchData.Record.record_name)
//  return record_name_;
//}
//inline ::std::string* BunchData_Record::release_record_name() {
//  clear_has_record_name();
//  if (record_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
//    return NULL;
//  } else {
//    ::std::string* temp = record_name_;
//    record_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
//    return temp;
//  }
//}
//inline void BunchData_Record::set_allocated_record_name(::std::string* record_name) {
//  if (record_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
//    delete record_name_;
//  }
//  if (record_name) {
//    set_has_record_name();
//    record_name_ = record_name;
//  } else {
//    clear_has_record_name();
//    record_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
//  }
//  // @@protoc_insertion_point(field_set_allocated:bsdaqPB.BunchData.Record.record_name)
//}
//
//// repeated double double_val = 2;
//inline int BunchData_Record::double_val_size() const {
//  return double_val_.size();
//}
//inline void BunchData_Record::clear_double_val() {
//  double_val_.Clear();
//}
//inline double BunchData_Record::double_val(int index) const {
//  // @@protoc_insertion_point(field_get:bsdaqPB.BunchData.Record.double_val)
//  return double_val_.Get(index);
//}
//inline void BunchData_Record::set_double_val(int index, double value) {
//  double_val_.Set(index, value);
//  // @@protoc_insertion_point(field_set:bsdaqPB.BunchData.Record.double_val)
//}
//inline void BunchData_Record::add_double_val(double value) {
//  double_val_.Add(value);
//  // @@protoc_insertion_point(field_add:bsdaqPB.BunchData.Record.double_val)
//}
//inline const ::google::protobuf::RepeatedField< double >&
//BunchData_Record::double_val() const {
//  // @@protoc_insertion_point(field_list:bsdaqPB.BunchData.Record.double_val)
//  return double_val_;
//}
//inline ::google::protobuf::RepeatedField< double >*
//BunchData_Record::mutable_double_val() {
//  // @@protoc_insertion_point(field_mutable_list:bsdaqPB.BunchData.Record.double_val)
//  return &double_val_;
//}
//
//// repeated string string_val = 3;
//inline int BunchData_Record::string_val_size() const {
//  return string_val_.size();
//}
//inline void BunchData_Record::clear_string_val() {
//  string_val_.Clear();
//}
//inline const ::std::string& BunchData_Record::string_val(int index) const {
//  // @@protoc_insertion_point(field_get:bsdaqPB.BunchData.Record.string_val)
//  return string_val_.Get(index);
//}
//inline ::std::string* BunchData_Record::mutable_string_val(int index) {
//  // @@protoc_insertion_point(field_mutable:bsdaqPB.BunchData.Record.string_val)
//  return string_val_.Mutable(index);
//}
//inline void BunchData_Record::set_string_val(int index, const ::std::string& value) {
//  // @@protoc_insertion_point(field_set:bsdaqPB.BunchData.Record.string_val)
//  string_val_.Mutable(index)->assign(value);
//}
//inline void BunchData_Record::set_string_val(int index, const char* value) {
//  string_val_.Mutable(index)->assign(value);
//  // @@protoc_insertion_point(field_set_char:bsdaqPB.BunchData.Record.string_val)
//}
//inline void BunchData_Record::set_string_val(int index, const char* value, size_t size) {
//  string_val_.Mutable(index)->assign(
//    reinterpret_cast<const char*>(value), size);
//  // @@protoc_insertion_point(field_set_pointer:bsdaqPB.BunchData.Record.string_val)
//}
//inline ::std::string* BunchData_Record::add_string_val() {
//  return string_val_.Add();
//}
//inline void BunchData_Record::add_string_val(const ::std::string& value) {
//  string_val_.Add()->assign(value);
//  // @@protoc_insertion_point(field_add:bsdaqPB.BunchData.Record.string_val)
//}
//inline void BunchData_Record::add_string_val(const char* value) {
//  string_val_.Add()->assign(value);
//  // @@protoc_insertion_point(field_add_char:bsdaqPB.BunchData.Record.string_val)
//}
//inline void BunchData_Record::add_string_val(const char* value, size_t size) {
//  string_val_.Add()->assign(reinterpret_cast<const char*>(value), size);
//  // @@protoc_insertion_point(field_add_pointer:bsdaqPB.BunchData.Record.string_val)
//}
//inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
//BunchData_Record::string_val() const {
//  // @@protoc_insertion_point(field_list:bsdaqPB.BunchData.Record.string_val)
//  return string_val_;
//}
//inline ::google::protobuf::RepeatedPtrField< ::std::string>*
//BunchData_Record::mutable_string_val() {
//  // @@protoc_insertion_point(field_mutable_list:bsdaqPB.BunchData.Record.string_val)
//  return &string_val_;
//}
//
//// -------------------------------------------------------------------
//
//// BunchData
//
//// required uint64 pulse_id = 1;
//inline bool BunchData::has_pulse_id() const {
//  return (_has_bits_[0] & 0x00000001u) != 0;
//}
//inline void BunchData::set_has_pulse_id() {
//  _has_bits_[0] |= 0x00000001u;
//}
//inline void BunchData::clear_has_pulse_id() {
//  _has_bits_[0] &= ~0x00000001u;
//}
//inline void BunchData::clear_pulse_id() {
//  pulse_id_ = GOOGLE_ULONGLONG(0);
//  clear_has_pulse_id();
//}
//inline ::google::protobuf::uint64 BunchData::pulse_id() const {
//  // @@protoc_insertion_point(field_get:bsdaqPB.BunchData.pulse_id)
//  return pulse_id_;
//}
//inline void BunchData::set_pulse_id(::google::protobuf::uint64 value) {
//  set_has_pulse_id();
//  pulse_id_ = value;
//  // @@protoc_insertion_point(field_set:bsdaqPB.BunchData.pulse_id)
//}
//
//// repeated .bsdaqPB.BunchData.Record record = 2;
//inline int BunchData::record_size() const {
//  return record_.size();
//}
//inline void BunchData::clear_record() {
//  record_.Clear();
//}
//inline const ::bsdaqPB::BunchData_Record& BunchData::record(int index) const {
//  // @@protoc_insertion_point(field_get:bsdaqPB.BunchData.record)
//  return record_.Get(index);
//}
//inline ::bsdaqPB::BunchData_Record* BunchData::mutable_record(int index) {
//  // @@protoc_insertion_point(field_mutable:bsdaqPB.BunchData.record)
//  return record_.Mutable(index);
//}
//inline ::bsdaqPB::BunchData_Record* BunchData::add_record() {
//  // @@protoc_insertion_point(field_add:bsdaqPB.BunchData.record)
//  return record_.Add();
//}
//inline const ::google::protobuf::RepeatedPtrField< ::bsdaqPB::BunchData_Record >&
//BunchData::record() const {
//  // @@protoc_insertion_point(field_list:bsdaqPB.BunchData.record)
//  return record_;
//}
//inline ::google::protobuf::RepeatedPtrField< ::bsdaqPB::BunchData_Record >*
//BunchData::mutable_record() {
//  // @@protoc_insertion_point(field_mutable_list:bsdaqPB.BunchData.record)
//  return &record_;
//}
//
//
//// @@protoc_insertion_point(namespace_scope)
//
//}  // namespace bsdaqPB
//
//#ifndef SWIG
//namespace google {
//namespace protobuf {
//
//
//}  // namespace google
//}  // namespace protobuf
//#endif  // SWIG
//
//// @@protoc_insertion_point(global_scope)
//
//#endif  // PROTOBUF_bunchData_2eproto__INCLUDED
